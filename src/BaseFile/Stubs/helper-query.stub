<?php

namespace App\Common\Helpers;


use Illuminate\Database\Eloquent\Model;

class QueryHelpers
{
    /**
     * @var Model
     */
    protected $model;

    /**
     * @var Builder
     */
    protected $query;

    /**
     * QueryHelperV2 constructor.
     *
     * @param Model $model
     */
    public function __construct(Model $model)
    {
        $this->model = $model;
    }

    /**
     * @return Model
     */
    public function getModel(): Model
    {
        return $this->model;
    }

    /**
     * @return Builder
     */
    public function createQueryBuilder(): Builder
    {
        return $this->model->newQuery();
    }

    /**
     * @return $this
     */
    public function newQuery()
    {
        $this->query = $this->createQueryBuilder();
        return $this;
    }

    /**
     * @return Builder
     */
    public function getQuery(): Builder
    {
        return $this->query;
    }

    /**
     * @param Builder $builder
     *
     * @return $this
     */
    public function setQuery(Builder $builder)
    {
        $this->query = $builder;
        return $this;
    }

    /**
     * @param array $fields
     * @return $this
     */
    public function setSelect(array $fields = ['*'])
    {
        if (empty($fields)) {
            $fields = ['*'];
        }
        $this->getQuery()->select($fields);
        return $this;
    }

    /**
     * @param array $withs
     * @return $this
     */
    public function setWith(array $withs = [])
    {
        $this->getQuery()->with($withs);
        return $this;
    }

    /**
     * @param array $scopes
     * @return $this
     */
    public function setScopes(array $scopes = [])
    {
        $this->getQuery()->scopes($scopes);
        return $this;
    }

    /**
     * @param array $params
     * @param array $conditions
     *
     * @return $this|Builder
     */
    public function createWhere(array $params, array $conditions)
    {
        // Can't Create Where SQL If Not Isset $params
        if (empty($params)) {
            return $this->getQuery();
        }

        // Can't Create Where SQL If Not Isset $conditions
        if (empty($conditions)) {
            return $this->getQuery();
        }

        foreach ($params as $key => $value) {

            // Pass If Not Isset Conditions With Keys
            if (!isset($conditions[$key])) {
                continue;
            }

            // Create Where SQL
            $this->where($value, $conditions[$key], $this->getQuery());
        }
        return $this;
    }

    /**
     * @param array $params
     *
     * @return $this
     */
    public function orderBy(array $params)
    {
        if (isset($params['order_by'])) {
            $order = isset($params['order']) ? strtoupper($params['order']) : 'ASC';
            $this->getQuery()->orderBy($params['order_by'], $order);
        }
        return $this;
    }

    /**
     * @param array $withCount
     *
     * @return $this
     */
    public function withCount(array $withCount)
    {
        if (!empty($withCount)) {
            $this->getQuery()->withCount($withCount);
        }
        return $this;
    }

    /**
     * @param $value
     * @param array $condition
     * @param null $query
     *
     * @return Builder|mixed
     */
    private function where($value, array $condition, $query = null)
    {
        if (isset($condition['group_relation'])) {
            $this->whereGroup($value, $condition['groups'], $query, $condition['group_connective']);
        } else {
            if ($condition['is_relation']) {
                return $this->whereWithRelation($value, $condition, $query);
            } else {
                return $this->whereNoRelation($value, $condition, $query);
            }
        }
    }

    /**
     * @param $value
     * @param array $condition
     * @param $query
     * @param $connective
     */
    private function whereGroup($value, array $condition, $query, $connective = 'AND')
    {
        $query->where(function ($query) use ($value, $condition, $connective) {
            foreach ($condition as $key => $cond) {
                if ($connective == 'OR') {
                    $this->where($value, $cond, $query);
                } else {
                    $this->where($value, $cond, $query);
                }
            }
        });
    }

    /**
     * @param $value
     * @param array $condition
     * @param null $query
     *
     * @return mixed
     */
    private function whereWithRelation($value, array $condition, $query = null)
    {
        return $query->whereHas($condition['relation'], function ($query) use ($value, $condition) {
            if (is_array($value)) {
                return $this->whereSpecialCondition($value, $condition, $query);
            } else {
                return $query->where($condition['table'] . '.' . $condition['field'], $value);
            }
        });
    }

    /**
     * @param $value
     * @param array $condition
     * @param null $query
     *
     * @return Builder|mixed
     */
    private function whereNoRelation($value, array $condition, $query = null)
    {
        if (is_array($value)) {
            return $this->whereSpecialCondition($value, $condition, $query);
        } else {
            return $query->where($condition['table'] . '.' . $condition['field'], $value);
        }
    }

    /**
     * @param $value
     * @param array $condition
     * @param null $query
     *
     * @return Builder|mixed
     */
    private function whereSpecialCondition($value, array $condition, $query = null)
    {
        $key = key($value);
        if (is_numeric($key)) {
            return $query->whereIn($condition['table'] . '.' . $condition['field'], $value);
        } else {
            return $this->whereSpecial($value, $condition, $query);
        }
    }

    /**
     * @param $value
     * @param $condition
     * @param $query
     *
     * @return mixed
     */
    private function whereSpecial($value, $condition, $query)
    {
        foreach ($value as $cond => $val) {
            switch ($cond) {
                case 'exist':
                    return $query->whereHas($val);
                    break;
                case 'not_exist':
                    return $query->whereDoesntHave($val);
                    break;
                case 'in':
                    return $query->whereIn($condition['field'], $val);
                    break;
                case 'or':
                    return $query->orWhere($condition['field'], $val);
                    break;
                case 'orLike':
                    return $query->orWhere($condition['field'], 'like', $val);
                    break;
                case 'orIn':
                    return $query->orWhereIn($condition['field'], $val);
                    break;
                default:
                    return $query->where($condition['field'], $cond, $val);
                    break;
            }
        }
    }
}
