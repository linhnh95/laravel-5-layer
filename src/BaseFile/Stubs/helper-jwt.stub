<?php

namespace App\Common\Helpers;


use App\Exceptions\AuthException;
use Firebase\JWT\JWT;

class JWTHelpers
{

    /**
     * Tạo Full JWT Token
     *
     * @param $keySecret
     * @param int $expiredToken
     * @param int $expiredRefresh
     *
     * @return array
     */
    public static function generateJWT($keySecret, $expiredToken = 3600, $expiredRefresh = 604800)
    {
        $result = [
            'access_token' => self::generateToken($keySecret, $expiredToken),
            'refresh_token' => self::generateRefreshToken($keySecret, $expiredRefresh),
            'token_type' => 'Bearer',
            'expired' => $expiredToken
        ];
        return $result;
    }

    /**
     * Tạo Refresh Token
     *
     * @param $keySecret
     * @param $expired
     *
     * @return string
     */
    public static function generateRefreshToken($keySecret, $expired = 604800)
    {
        $key = file_get_contents(base_path() . '/privateKey.pem', true);
        $refreshToken = [
            "iss" => request()->getHost(),
            "aud" => request()->getHost(),
            "type" => 'refresh',
            "exp" => time() + $expired,
            "key" => $keySecret

        ];
        $refresh = JWT::encode($refreshToken, $key, 'RS256');
        return $refresh;
    }

    /**
     * Tạo JWT Token
     *
     * @param $keySecret
     * @param $expired
     *
     * @return string
     */
    public static function generateToken($keySecret, $expired = 3600)
    {
        $key = file_get_contents(base_path() . '/privateKey.pem', true);
        $token = [
            "alg" => "RS256",
            "typ" => "JWT",
            "iss" => request()->getHost(),
            "aud" => request()->getHost(),
            "sub" => "Token Login",
            "iat" => time(),
            "nbf" => time(),
            "exp" => time() + $expired,
            "key" => $keySecret
        ];
        $jwt = JWT::encode($token, $key, 'RS256');
        return $jwt;
    }

    /**
     * Decode JWT Token
     *
     * @param $jwt
     *
     * @return object
     *
     * @throws AuthException
     */
    public static function decodeToken($jwt)
    {
        try {
            $key = file_get_contents(base_path() . '/publicKey.pem', true);
            JWT::$leeway = 60;
            $decoded = JWT::decode($jwt, $key, ["RS256"]);
            return $decoded;
        } catch (\Exception $exception) {
            throw new AuthException();
        }
    }
}
