<?php

namespace App\Common\Redis;


use App\Common\Helpers\RedisHelper;
use Closure;
use Illuminate\Cache\CacheManager;

class CacheRedisManager extends CacheManager
{
    /**
     * @param array $config
     *
     * @return \Illuminate\Cache\Repository|\Illuminate\Contracts\Cache\Repository
     */
    protected function createRedisDriver(array $config)
    {
        try {
            return parent::createRedisDriver($config);
        } catch (\Exception $e) {
            return $this->resolve('database');
        }
    }

    /**
     * @param array $config
     *
     * @return \Illuminate\Cache\Repository|\Illuminate\Contracts\Cache\Repository
     */
    protected function createDatabaseDriver(array $config)
    {
        try{
            if(RedisHelper::healthCheck()){
                return parent::resolve('redis');
            }else{
                return parent::createDatabaseDriver($config);
            }
        }catch (\Exception $e){
            return parent::createDatabaseDriver($config);
        }
    }

    /**
     * @param string $key
     * @param mixed $value
     * @param null $ttl
     *
     * @return bool
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function set($key, $value, $ttl = null)
    {
        return parent::set($key, $value, $ttl);
    }

    /**
     * @param string $key
     * @return bool
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function delete($key)
    {
        return parent::delete($key);
    }

    /**
     * @return bool
     */
    public function clear()
    {
        return parent::clear();
    }

    /**
     * @param iterable $keys
     * @param null $default
     *
     * @return iterable
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function getMultiple($keys, $default = null)
    {
        return parent::getMultiple($keys, $default);
    }

    /**
     * @param iterable $values
     * @param null $ttl
     *
     * @return bool
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function setMultiple($values, $ttl = null)
    {
        return parent::setMultiple($values, $ttl);
    }

    /**
     * @param iterable $keys
     *
     * @return bool|mixed
     */
    public function deleteMultiple($keys)
    {
        return $this->deleteMultiple($keys);
    }

    /**
     * @param string $key
     *
     * @return bool
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function has($key)
    {
        return parent::has($key);
    }

    /**
     * @param string $key
     * @param null $default
     *
     * @return mixed
     */
    public function pull($key, $default = null)
    {
        return parent::pull($key, $default);
    }

    /**
     * @param string $key
     * @param mixed $value
     * @param null $ttl
     *
     * @return bool
     */
    public function put($key, $value, $ttl = null)
    {
        return parent::put($key, $value, $ttl);
    }

    /**
     * @param string $key
     * @param mixed $value
     * @param null $ttl
     *
     * @return bool
     */
    public function add($key, $value, $ttl = null)
    {
        return parent::add($key, $value, $ttl);
    }

    /**
     * @param string $key
     * @param int $value
     *
     * @return bool|int
     */
    public function increment($key, $value = 1)
    {
        return parent::increment($key, $value);
    }

    /**
     * @param string $key
     * @param int $value
     *
     * @return bool|int
     */
    public function decrement($key, $value = 1)
    {
        return parent::decrement($key, $value);
    }

    /**
     * @param string $key
     * @param mixed $value
     *
     * @return bool
     */
    public function forever($key, $value)
    {
        return parent::forever($key, $value);
    }

    /**
     * @param string $key
     * @param \DateInterval|\DateTimeInterface|int|null $ttl
     * @param Closure $callback
     *
     * @return mixed
     */
    public function remember($key, $ttl, Closure $callback)
    {
        return parent::remember($key, $ttl, $callback);
    }

    /**
     * @param string $key
     * @param Closure $callback
     *
     * @return mixed
     */
    public function sear($key, Closure $callback)
    {
        return parent::sear($key, $callback);
    }

    /**
     * @param string $key
     * @param Closure $callback
     *
     * @return mixed
     */
    public function rememberForever($key, Closure $callback)
    {
        return parent::rememberForever($key, $callback);
    }

    /**
     * @param string $key
     *
     * @return bool
     */
    public function forget($key)
    {
        return parent::forget($key);
    }

    /**
     * @return \Illuminate\Contracts\Cache\Store
     */
    public function getStore()
    {
        return parent::getStore();
    }

}
