<?php

namespace DummyNamespace;

use App\Abstraction\Dependency\IDummyClassDependency;
use App\Models\DummyClass;

final class SQLDummyClass extends ASQLQuery implements IDummyClassDependency
{
    /**
     * Dependency constructor.
     *
     * @param DummyClass $item
     */
    public function __construct(DummyClass $item)
    {
        parent::__construct($item);
        $this->queryWith([]);
        $table = config('tables.{{table_name}}');
        $this->conditions([
            'id' => $this->parseQueryCondition($table, 'id'),
        ]);
    }

    /**
     * @param array $params
     * @param array $fields
     * @param bool $getAll
     *
     * @return mixed
     *
     * @throws \App\Exceptions\ServerException
     */
    public function getAll(array $params = [], array $fields = ['*'], bool $getAll = false)
    {
        if (isset($params['with_relation'])) {
            $this->queryWith($params['with_relation']);
        }
        return parent::getAll($params, $fields, $getAll); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $params
     * @param array $fields
     *
     * @return mixed
     *
     * @throws \App\Exceptions\ServerException
     */
    public function getOneBy(array $params = [], array $fields = ['*'])
    {
        if (isset($params['with_relation'])) {
            $this->queryWith($params['with_relation']);
        }
        return parent::getOneBy($params, $fields); // TODO: Change the autogenerated stub
    }
}
